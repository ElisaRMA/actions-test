import os
import sys
import json
import argparse
import requests
from datetime import datetime

def create_pull_request(repo_owner, repo_name, token, branch_name, base_branch, 
                        next_monday, old_date, file_changed):
    """
    Creates a pull request using the GitHub API
    """
    # GitHub API URL for creating a pull request
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/pulls"
    
    # Headers for authentication with GitHub token
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    # PR title and body
    title = f"Update REFERENCE_DATE to {next_monday}"
    body = (f"This automated PR updates the REFERENCE_DATE to the next Monday ({next_monday}).\n\n"
            f"Automatically generated by the Update Reference Date workflow.")
    
    # Payload for the PR creation
    payload = {
        "title": title,
        "body": body,
        "head": branch_name,
        "base": base_branch
    }
    
    try:
        # Create the PR
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        pr_data = response.json()
        
        print(f"Pull request created successfully: {pr_data['html_url']}")
        
        # Return PR info
        return {
            "pr_url": pr_data["html_url"],
            "pr_number": pr_data["number"]
        }
    
    except requests.HTTPError as e:
        if e.response.status_code == 422:  # Unprocessable Entity - PR might already exist
            print("Error creating PR. It may already exist or there might be an issue with the branches.")
            # Check for existing PRs
            existing_prs = check_existing_prs(repo_owner, repo_name, token, branch_name)
            if existing_prs:
                return {
                    "pr_url": existing_prs["html_url"],
                    "pr_number": existing_prs["number"]
                }
            else:
                print(f"Error details: {e.response.text}")
                sys.exit(1)
        else:
            print(f"Error creating PR: {e.response.status_code} - {e.response.text}")
            sys.exit(1)
    
    except Exception as e:
        print(f"Unexpected error creating PR: {str(e)}")
        sys.exit(1)

def check_existing_prs(repo_owner, repo_name, token, branch_name):
    """
    Check if there's already an open PR for this branch
    """
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/pulls"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    params = {
        "state": "open",
        "head": f"{repo_owner}:{branch_name}"
    }
    
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        prs = response.json()
        
        if prs and len(prs) > 0:
            print(f"Found existing PR: {prs[0]['html_url']}")
            return prs[0]
        
        return None
    
    except Exception as e:
        print(f"Error checking existing PRs: {str(e)}")
        return None

def get_file_diff(repo_owner, repo_name, token, pr_number, old_date, next_monday, file_changed):
    """
    Get the file diff for the PR to include in the Slack notification
    """
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/pulls/{pr_number}/files"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        files = response.json()
        
        diff_content = ""
        
        for file in files:
            diff_content += f"File Changed: `{file['filename']}`\n"
            diff_content += "```diff\n"
            
            # Get only lines with additions or deletions from the patch
            if 'patch' in file:
                patch = file['patch']
                for line in patch.split('\n'):
                    if line.startswith('+') or line.startswith('-'):
                        diff_content += line + '\n'
            
            diff_content += "```\n"
        
        # If no diff was found, provide a simple summary
        if not diff_content:
            diff_content = f"Changed REFERENCE_DATE from `{old_date}` to `{next_monday}` in file `{file_changed}`"
            
        return diff_content
    
    except Exception as e:
        print(f"Error getting file diff: {str(e)}")
        return f"Changed REFERENCE_DATE from `{old_date}` to `{next_monday}` in file `{file_changed}`"

def write_github_output(key, value):
    """
    Write a key-value pair to the GitHub Actions output
    """
    with open(os.environ.get('GITHUB_OUTPUT', '/dev/null'), 'a') as f:
        f.write(f"{key}={value}\n")

def main():
    parser = argparse.ArgumentParser(description='Create a GitHub Pull Request')
    parser.add_argument('--repo', required=True, help='Repository in owner/name format')
    parser.add_argument('--token', required=True, help='GitHub token')
    parser.add_argument('--branch', required=True, help='Branch name to create PR from')
    parser.add_argument('--base', default='main', help='Base branch to merge into')
    parser.add_argument('--next-monday', required=True, help='Next Monday date string')
    parser.add_argument('--old-date', required=True, help='Old reference date')
    parser.add_argument('--file-changed', required=True, help='File that was changed')
    
    args = parser.parse_args()
    
    # Split repo into owner and name
    repo_parts = args.repo.split('/')
    if len(repo_parts) != 2:
        print("Repository must be in the format 'owner/name'")
        sys.exit(1)
    
    repo_owner, repo_name = repo_parts
    
    # Create the PR
    pr_info = create_pull_request(
        repo_owner=repo_owner,
        repo_name=repo_name,
        token=args.token,
        branch_name=args.branch,
        base_branch=args.base,
        next_monday=args.next_monday,
        old_date=args.old_date,
        file_changed=args.file_changed
    )
    
    # Get the diff for Slack notification
    diff_content = get_file_diff(
        repo_owner=repo_owner,
        repo_name=repo_name,
        token=args.token,
        pr_number=pr_info["pr_number"],
        old_date=args.old_date,
        next_monday=args.next_monday,
        file_changed=args.file_changed
    )
    
    # Write outputs for GitHub Actions
    write_github_output("pr_url", pr_info["pr_url"])
    write_github_output("pr_number", str(pr_info["pr_number"]))
    write_github_output("diff_content", diff_content)
    
    print(f"PR #{pr_info['pr_number']} created: {pr_info['pr_url']}")
