name: ⚙️ Atualização de parâmetros do job credit_data_science-prod-v1-aws

on:
  # Trigger when an issue is opened or edited
  issues:
    types: [opened, edited]

  # Allow manual trigger via the GitHub UI, no inputs required
  workflow_dispatch:

jobs:
  debug-parameters:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Get issue details and print labels
        run: |
          echo "Fetching issue data and debugging..."

          # Fetch issue details using the issue trigger or manual dispatch
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          ISSUE_LABELS="${{ github.event.issue.labels }}"

          # Always check the title and labels regardless of trigger
          echo "Issue title: $ISSUE_TITLE"
          
          # Print the labels as an array
          echo "Issue labels as an array: ${ISSUE_LABELS}"

          # Print each label separately
          echo "Printing each label:"
          for label in $(echo "$ISSUE_LABELS" | jq -r '.[].name'); do
            echo "Label: $label"
          done

          echo "Issue body: $ISSUE_BODY"

          # Parse and print specific parameters in the body if available
          WRITE_CREDIT_ENGINE=$(echo "$ISSUE_BODY" | grep -o 'WRITE_CREDIT_ENGINE.*' | sed 's/.*WRITE_CREDIT_ENGINE: //')
          INITIAL_DATE_CHECK=$(echo "$ISSUE_BODY" | grep -o 'INITIAL_DATE.*' | sed 's/.*INITIAL_DATE: //')
          INITIAL_DATE_SETUP=$(echo "$ISSUE_BODY" | grep -o 'INITIAL_DATE_SETUP.*' | sed 's/.*INITIAL_DATE_SETUP: //')

          echo "WRITE_CREDIT_ENGINE: $WRITE_CREDIT_ENGINE"
          echo "INITIAL_DATE_CHECK: $INITIAL_DATE_CHECK"
          echo "INITIAL_DATE_SETUP: $INITIAL_DATE_SETUP"

          # If triggered manually, we will try to find an issue (could be empty if no matching issue)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger detected. Attempting to fetch an issue with the required title and labels..."

            # Manually fetch the issue (GitHub API)
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues?state=open" \
              | jq '.[] | select(.title | contains("[credit-data-science] Parameters_update"))' \
              | jq '.labels'  # Outputs the labels of the matched issue if found
          fi

      - name: Log parameters for further analysis
        run: |
          echo "Final parameters:"
          echo "WRITE_CREDIT_ENGINE: $WRITE_CREDIT_ENGINE"
          echo "INITIAL_DATE_CHECK: $INITIAL_DATE_CHECK"
          echo "Initial date setup: $INITIAL_DATE_SETUP"
