name: ⚙️ Atualização de parâmetros do job credit_data_science-prod-v1-aws
on:
  # Trigger when an issue is opened or edited
  issues:
    types: [opened, edited]
  # Allow manual trigger via the GitHub UI, no inputs required
  workflow_dispatch:
jobs:
  debug-parameters:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Get issue details and print labels
        run: |
          echo "Fetching issue data and debugging..."
          
          # Check which event triggered the workflow
          if [[ "${{ github.event_name }}" == "issues" ]]; then
            echo "Workflow triggered by issue event"
            
            # For issue event trigger, use the issue context directly
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_BODY="${{ github.event.issue.body }}"
            
            echo "Issue title: $ISSUE_TITLE"
            echo "Issue body available: $([ ! -z "$ISSUE_BODY" ] && echo "Yes" || echo "No")"
            
            # Print issue labels if available
            echo "Issue labels:"
            echo '${{ toJSON(github.event.issue.labels) }}' | jq -r '.[].name'
            
            # Parse specific parameters from the issue body
            if [ ! -z "$ISSUE_BODY" ]; then
              # Extract parameters from checkboxes and inputs
              # Find which option is checked for WRITE_CREDIT_ENGINE
              if echo "$ISSUE_BODY" | grep -q '- \[x\] true'; then
                WRITE_CREDIT_ENGINE="true"
              elif echo "$ISSUE_BODY" | grep -q '- \[x\] false'; then
                WRITE_CREDIT_ENGINE="false"
              else
                WRITE_CREDIT_ENGINE="not specified"
              fi
              
              # Find which option is checked for INITIAL_DATE_CHECK
              if echo "$ISSUE_BODY" | grep -q '- \[x\] Sim'; then
                INITIAL_DATE_CHECK="Sim"
              elif echo "$ISSUE_BODY" | grep -q '- \[x\] Não'; then
                INITIAL_DATE_CHECK="Não"
              else
                INITIAL_DATE_CHECK="not specified"
              fi
              
              # Extract the date value from the input field
              INITIAL_DATE_SETUP=$(echo "$ISSUE_BODY" | grep -A 2 'Qual a data para o INITIAL_DATE' | tail -n 1 | xargs || echo "not specified")
              
              echo "WRITE_CREDIT_ENGINE: $WRITE_CREDIT_ENGINE"
              echo "INITIAL_DATE_CHECK: $INITIAL_DATE_CHECK"
              echo "INITIAL_DATE_SETUP: $INITIAL_DATE_SETUP"
            else
              echo "Issue body is empty or not available"
            fi
            
          else
            echo "Workflow triggered manually via workflow_dispatch"
            
            # For manual dispatch, query the most recent matching issue using GitHub API
            echo "Fetching the most recent [credit-data-science] Parameters_update issue..."
            
            ISSUE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues?state=open&labels=credit,job-parameters&per_page=1")
            
            # Check if we found an issue
            ISSUE_COUNT=$(echo "$ISSUE_DATA" | jq '. | length')
            
            if [[ "$ISSUE_COUNT" -gt 0 ]]; then
              # Extract information from the issue
              ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.[0].title')
              ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.[0].body')
              ISSUE_NUMBER=$(echo "$ISSUE_DATA" | jq -r '.[0].number')
              
              echo "Found issue #$ISSUE_NUMBER with title: $ISSUE_TITLE"
              echo "Issue body available: $([ ! -z "$ISSUE_BODY" ] && echo "Yes" || echo "No")"
              
              # Print issue labels
              echo "Issue labels:"
              echo "$ISSUE_DATA" | jq -r '.[0].labels[].name'
              
              # Parse specific parameters from the issue body
              if [ ! -z "$ISSUE_BODY" ]; then
                # Extract parameters from checkboxes and inputs
                # Find which option is checked for WRITE_CREDIT_ENGINE
                if echo "$ISSUE_BODY" | grep -q '- \[x\] true'; then
                  WRITE_CREDIT_ENGINE="true"
                elif echo "$ISSUE_BODY" | grep -q '- \[x\] false'; then
                  WRITE_CREDIT_ENGINE="false"
                else
                  WRITE_CREDIT_ENGINE="not specified"
                fi
                
                # Find which option is checked for INITIAL_DATE_CHECK
                if echo "$ISSUE_BODY" | grep -q '- \[x\] Sim'; then
                  INITIAL_DATE_CHECK="Sim"
                elif echo "$ISSUE_BODY" | grep -q '- \[x\] Não'; then
                  INITIAL_DATE_CHECK="Não"
                else
                  INITIAL_DATE_CHECK="not specified"
                fi
                
                # Extract the date value from the input field
                INITIAL_DATE_SETUP=$(echo "$ISSUE_BODY" | grep -A 2 'Qual a data para o INITIAL_DATE' | tail -n 1 | xargs || echo "not specified")
                
                echo "WRITE_CREDIT_ENGINE: $WRITE_CREDIT_ENGINE"
                echo "INITIAL_DATE_CHECK: $INITIAL_DATE_CHECK"
                echo "INITIAL_DATE_SETUP: $INITIAL_DATE_SETUP"
              else
                echo "Issue body is empty or not in expected format"
              fi
              
            else
              echo "No matching issues found with the required labels."
            fi
          fi
          
      - name: Log final parameters
        run: |
          echo "Final parameters for job execution:"
          echo "WRITE_CREDIT_ENGINE: ${WRITE_CREDIT_ENGINE:-not set}"
          echo "INITIAL_DATE_CHECK: ${INITIAL_DATE_CHECK:-not set}"
          echo "INITIAL_DATE_SETUP: ${INITIAL_DATE_SETUP:-not set}"
          
          # Set outputs for subsequent steps if needed
          echo "write_credit_engine=${WRITE_CREDIT_ENGINE:-false}" >> $GITHUB_ENV
          
          if [[ "${INITIAL_DATE_CHECK:-}" == "Sim" && ! -z "${INITIAL_DATE_SETUP:-}" ]]; then
            echo "initial_date=${INITIAL_DATE_SETUP}" >> $GITHUB_ENV
          fi
